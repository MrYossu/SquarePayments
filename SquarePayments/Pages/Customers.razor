@page "/Customers"
@using Pixata.Extensions
@using Square
@using Square.Exceptions
@using Square.Models
@using SquarePayments.Data
@inject SquareHelper _squareHelper
<PageTitle>Customers</PageTitle>

<h1>Customers</h1>

<button @onclick="@ListCustomers">List customers</button>

<div class="text-danger">@CustomerListMsg</div>

@if (CustomerList.Any()) {
  <ul>
    @foreach (Customer c in CustomerList) {
      <li>(@c.Id) @c.GivenName @c.FamilyName (@c.EmailAddress)</li>
    }
  </ul>
}

<fieldset style="border-top: 1px solid #000" class="mt-3">
  <legend>New customer</legend>
  <EditForm Model="@Customer" OnSubmit="@CreateCustomer">
    <div class="row">
      <label class="col-2">First name</label>
      <div class="col-8"><InputText @bind-Value="@Customer.FirstName" /></div>
    </div>
    <div class="row">
      <label class="col-2">Surname</label>
      <div class="col-8"><InputText @bind-Value="@Customer.Surname" /></div>
    </div>
    <div class="row">
      <label class="col-2">Email</label>
      <div class="col-8"><InputText @bind-Value="@Customer.Email" /></div>
    </div>
    <div class="row">
      <label class="col-2">Address 1</label>
      <div class="col-8"><InputText @bind-Value="@Customer.Address1" /></div>
    </div>
    <div class="row">
      <label class="col-2">Address 2</label>
      <div class="col-8"><InputText @bind-Value="@Customer.Address2" /></div>
    </div>
    <div class="row">
      <label class="col-2">Postcode</label>
      <div class="col-8"><InputText @bind-Value="@Customer.Postcode" /></div>
    </div>
    <div class="row">
      <label class="col-2">Country</label>
      <div class="col-8"><InputText @bind-Value="@Customer.Country" /></div>
    </div>
    <div class="row">
      <label class="col-2">Phone</label>
      <div class="col-8"><InputText @bind-Value="@Customer.Phone" /></div>
    </div>
    <div class="row">
      <div class="col-2"> </div>
      <div class="col-2"><button type="submit" style="width: 100px">Create</button></div>
    </div>
  </EditForm>
  <p>@NewCustomerMsg</p>
</fieldset>

<style>
  input {
    margin-bottom: 5px;
  }
</style>

@code {
  private SquareClient _squareClient = null!;
  public CustomerDto Customer { get; set; } = new();
  public List<Customer> CustomerList { get; set; } = new();
  public string CustomerListMsg { get; set; } = "";

  protected override void OnInitialized() =>
    _squareClient = _squareHelper.GetSquareClient();

  private async Task ListCustomers() {
    try {
      CustomerList = (await _squareClient.CustomersApi.ListCustomersAsync()).Customers.ToList();
    }
    catch (ApiException ex) {
      CustomerListMsg = $"{ex.GetType().Name}: {ex.Errors.Select(e => $"({e.Category}) {e.Detail}").JoinStr()}";
    }
    catch (Exception ex) {
      CustomerListMsg = $"{ex.GetType().Name}: {ex.Message}";
    }
  }

  public string NewCustomerMsg { get; set; } = "";

  private async Task CreateCustomer() {
    NewCustomerMsg = "Please wait...";
    CreateCustomerRequest body = new CreateCustomerRequest.Builder()
      .IdempotencyKey(Guid.NewGuid().ToString())
      .GivenName(Customer.FirstName)
      .FamilyName(Customer.Surname)
      .EmailAddress(Customer.Email)
      .Address(new Address.Builder()
        .AddressLine1(Customer.Address1)
        .AddressLine2(Customer.Address2)
        .PostalCode(Customer.Postcode)
        .Country(Customer.Country)
        .Build())
      .PhoneNumber(Customer.Phone)
      .Build();
    try {
      CreateCustomerResponse result = await _squareClient.CustomersApi.CreateCustomerAsync(body);
      NewCustomerMsg = "Success";
    }
    catch (ApiException ex) {
      NewCustomerMsg = $"Ex: {string.Join("", ex.Errors.Select(e => e.Detail))}";
    }
  }

}