@page "/Payments"
@inject IJSRuntime _js;
@inject SquareHelper _squareHelper
@using SquarePayments.Data
@using Square
@using Square.Exceptions
@using Square.Models
@implements IAsyncDisposable;

<PageTitle>Take payments with Square</PageTitle>

<h1>Take payments with Square</h1>

<div id="@_elementId" class="w-50"></div>
<div><input @bind-value="@_message" placeholder="Enter the payment description" style="width: 300px" class="form-control mb-2" /></div>
<div>
  <select value="@Amount" @onchange="@(v => Amount = Convert.ToInt64(v.Value))" class="form-control" style="width: 250px">
    <option value="199" selected="selected">Small bar of chocolate &pound;1.99</option>
    <option value="299">Big bar of chocolate &pound;2.99p</option>
    <option value="399">Massive bar of chocolate &pound;3.99p</option>
  </select>
</div>
<button @onclick="@Pay">Pay</button>

@if (Msgs.Any()) {
  <ul>
    @foreach (string msg in Msgs) {
      <li>@msg</li>
    }
  </ul>
}

@code{

  private IJSObjectReference _squareJs = null!;
  private IJSObjectReference _squareCard = null!;
  private readonly Square.Environment _environment = Square.Environment.Sandbox;
  private readonly string _elementId = "SquareCardPayment" + Guid.NewGuid().ToString("N");
  private bool _payEnabled;
  public List<string> Msgs { get; set; } = new() { "Loading...." };
  public long Amount { get; set; } = 99;
  private string _message = "";

  protected override async Task OnAfterRenderAsync(bool firstRender) {
    Msgs.Clear();
    if (firstRender) {
      try {
        await _js.InvokeAsync<IJSObjectReference>("import", _environment == Square.Environment.Sandbox ? "https://sandbox.web.squarecdn.com/v1/square.js" : "https://web.squarecdn.com/v1/square.js");
        _squareJs = await _js.InvokeAsync<IJSObjectReference>("import", "/Square.js");
        _squareCard = await _squareJs.InvokeAsync<IJSObjectReference>("addSquareCardPayment", _elementId, _squareHelper.AppId, _squareHelper.LocationId);
        _payEnabled = true;
        Msgs.Clear();
        Msgs.Add("Ready");
        StateHasChanged();
      }
      catch (Exception ex) {
        Msgs.Clear();
        Msgs.Add($"Exception ({ex.GetType().Name}): {ex.Message}");
        StateHasChanged();
      }
    }
  }

  private async Task Pay() {
    Msgs.Clear();
    Msgs.Add("Processing...");
    SquareClient squareClient = _squareHelper.GetSquareClient();

    Money amountMoney = new Money.Builder()
      .Amount(Amount) // Amount is in pennies
      .Currency("GBP")
      .Build();

    string sourceId = await _squareJs.InvokeAsync<string>("getSquareCardToken", _squareCard);
    // NOTE - The following data would need to be 
    var contact = new {
      addressLines = new[] { "123 Main Street", "Apartment 1" },
      familyName = "Doe",
      givenName = "John",
      email = "jondoe@gmail.com",
      country = "GB",
      city = "London"
    };
    string verificationToken = await _squareJs.InvokeAsync<string>("verifyTheBuyer", _squareHelper.AppId, _squareHelper.LocationId, sourceId, (Amount / 100.0).ToString("F2"), contact);
    CreatePaymentRequest body = new CreatePaymentRequest.Builder(sourceId, Guid.NewGuid().ToString(), amountMoney)
      .Autocomplete(true)
      .ReferenceId($"Test{DateTime.Now.ToString("yymmddHHmmss")}")
      .VerificationToken(verificationToken)
      .Note(string.IsNullOrWhiteSpace(_message) ? "Don't know what this was" : _message)
      .Build();

    try {
      CreatePaymentResponse result = await squareClient.PaymentsApi.CreatePaymentAsync(body);
      Msgs.Clear();
      if (result.Errors?.Any() ?? false) {
        Msgs.Add($"Errors: {result.Errors.Count}");
      }
      Msgs.Add($"Payment.Id: {result.Payment.Id}");
      Msgs.Add($"StatusCode: {result.Context.Response.StatusCode}");
      Msgs.Add($"Response: {result.Context.Response}");
    }
    catch (ApiException ex) {
      Msgs.Clear();
      Msgs.Add("ApiException: " + string.Join("", ex.Errors.Select(e => e.Detail)));
    }
    catch (Exception ex) {
      Msgs.Clear();
      Msgs.Add($"HTTP error(s): {ex.Message}");
    }
  }

  async ValueTask IAsyncDisposable.DisposeAsync() {
    if (_squareJs is not null) {
      await _squareJs.DisposeAsync();
    }
  }

}